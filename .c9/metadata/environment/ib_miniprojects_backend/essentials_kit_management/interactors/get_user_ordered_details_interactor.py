{"filter":false,"title":"get_user_ordered_details_interactor.py","tooltip":"/ib_miniprojects_backend/essentials_kit_management/interactors/get_user_ordered_details_interactor.py","undoManager":{"mark":10,"position":10,"stack":[[{"start":{"row":100,"column":49},"end":{"row":100,"column":50},"action":"remove","lines":[" "],"id":2},{"start":{"row":100,"column":48},"end":{"row":100,"column":49},"action":"remove","lines":[" "]},{"start":{"row":100,"column":44},"end":{"row":100,"column":48},"action":"remove","lines":["    "]},{"start":{"row":100,"column":40},"end":{"row":100,"column":44},"action":"remove","lines":["    "]},{"start":{"row":100,"column":36},"end":{"row":100,"column":40},"action":"remove","lines":["    "]},{"start":{"row":100,"column":32},"end":{"row":100,"column":36},"action":"remove","lines":["    "]},{"start":{"row":100,"column":28},"end":{"row":100,"column":32},"action":"remove","lines":["    "]},{"start":{"row":100,"column":24},"end":{"row":100,"column":28},"action":"remove","lines":["    "]},{"start":{"row":100,"column":20},"end":{"row":100,"column":24},"action":"remove","lines":["    "]},{"start":{"row":100,"column":16},"end":{"row":100,"column":20},"action":"remove","lines":["    "]},{"start":{"row":100,"column":12},"end":{"row":100,"column":16},"action":"remove","lines":["    "]},{"start":{"row":100,"column":8},"end":{"row":100,"column":12},"action":"remove","lines":["    "]},{"start":{"row":100,"column":4},"end":{"row":100,"column":8},"action":"remove","lines":["    "]},{"start":{"row":100,"column":0},"end":{"row":100,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":96,"column":75},"end":{"row":96,"column":76},"action":"remove","lines":[" "],"id":3},{"start":{"row":96,"column":74},"end":{"row":96,"column":75},"action":"remove","lines":["e"]},{"start":{"row":96,"column":73},"end":{"row":96,"column":74},"action":"remove","lines":["r"]},{"start":{"row":96,"column":72},"end":{"row":96,"column":73},"action":"remove","lines":["e"]},{"start":{"row":96,"column":71},"end":{"row":96,"column":72},"action":"remove","lines":["h"]},{"start":{"row":96,"column":70},"end":{"row":96,"column":71},"action":"remove","lines":[" "]},{"start":{"row":96,"column":69},"end":{"row":96,"column":70},"action":"remove","lines":["t"]},{"start":{"row":96,"column":68},"end":{"row":96,"column":69},"action":"remove","lines":["b"]},{"start":{"row":96,"column":67},"end":{"row":96,"column":68},"action":"remove","lines":["u"]},{"start":{"row":96,"column":66},"end":{"row":96,"column":67},"action":"remove","lines":["o"]},{"start":{"row":96,"column":65},"end":{"row":96,"column":66},"action":"remove","lines":["d"]},{"start":{"row":96,"column":64},"end":{"row":96,"column":65},"action":"remove","lines":[" "]},{"start":{"row":96,"column":63},"end":{"row":96,"column":64},"action":"remove","lines":["e"]},{"start":{"row":96,"column":62},"end":{"row":96,"column":63},"action":"remove","lines":["v"]},{"start":{"row":96,"column":61},"end":{"row":96,"column":62},"action":"remove","lines":["a"]},{"start":{"row":96,"column":60},"end":{"row":96,"column":61},"action":"remove","lines":["h"]},{"start":{"row":96,"column":59},"end":{"row":96,"column":60},"action":"remove","lines":[" "]}],[{"start":{"row":96,"column":58},"end":{"row":96,"column":59},"action":"remove","lines":["i"],"id":4},{"start":{"row":96,"column":57},"end":{"row":96,"column":58},"action":"remove","lines":[" "]}],[{"start":{"row":96,"column":57},"end":{"row":96,"column":58},"action":"insert","lines":[" "],"id":5},{"start":{"row":96,"column":58},"end":{"row":96,"column":59},"action":"insert","lines":["h"]},{"start":{"row":96,"column":59},"end":{"row":96,"column":60},"action":"insert","lines":["a"]},{"start":{"row":96,"column":60},"end":{"row":96,"column":61},"action":"insert","lines":["v"]},{"start":{"row":96,"column":61},"end":{"row":96,"column":62},"action":"insert","lines":["e"]}],[{"start":{"row":96,"column":62},"end":{"row":96,"column":63},"action":"insert","lines":[" "],"id":6},{"start":{"row":96,"column":63},"end":{"row":96,"column":64},"action":"insert","lines":["d"]},{"start":{"row":96,"column":64},"end":{"row":96,"column":65},"action":"insert","lines":["o"]},{"start":{"row":96,"column":65},"end":{"row":96,"column":66},"action":"insert","lines":["u"]},{"start":{"row":96,"column":66},"end":{"row":96,"column":67},"action":"insert","lines":["t"]}],[{"start":{"row":89,"column":0},"end":{"row":90,"column":0},"action":"remove","lines":["",""],"id":7}],[{"start":{"row":88,"column":0},"end":{"row":89,"column":0},"action":"remove","lines":["",""],"id":8}],[{"start":{"row":48,"column":0},"end":{"row":49,"column":0},"action":"remove","lines":["",""],"id":9}],[{"start":{"row":68,"column":0},"end":{"row":69,"column":0},"action":"remove","lines":["",""],"id":10}],[{"start":{"row":48,"column":0},"end":{"row":49,"column":0},"action":"remove","lines":["",""],"id":11}],[{"start":{"row":0,"column":0},"end":{"row":95,"column":0},"action":"remove","lines":["from essentials_kit_management.interactors.storages import \\","    FormStorageInterface","from essentials_kit_management.interactors.presenters import \\","    FormPresenterInterface","","from essentials_kit_management.interactors.storages.dtos import (","    GetUserOrderDto",")","","from essentials_kit_management.constants.enums import FormStatusEnum","","","class GetUserOrderedDetailsInteractor:","","    def __init__(self,","                 form_storage: FormStorageInterface,","                 form_presenter: FormPresenterInterface):","","        self.form_storage = form_storage","        self.form_presenter = form_presenter","","    def get_user_ordered_details(self, user_id:int, form_id: int):","","        is_valid_form_id = self.form_storage.is_valid_form_id(form_id=form_id)","        invalid_form_id_given = not is_valid_form_id","","        if invalid_form_id_given:","            self.form_presenter.raise_invalid_form_id_exception()","            return","","        user_order_dtos = self.form_storage.get_order_dtos(user_id=user_id,","                                                      form_id=form_id)","        user_brand_dtos = self.form_storage.get_user_brand_dtos(user_order_dtos)","        user_item_dtos = self.form_storage.get_user_item_dtos(user_order_dtos)","","        brand_dicts = self._convert_brand_to_dicts(brand_dtos=user_brand_dtos)","        item_dicts = self._convert_item_to_dicts(item_dtos=user_item_dtos)","","        order_detail_dtos = self._get_user_order_detail_dtos(","            orders=user_order_dtos,","            brand_dicts=brand_dicts,","            item_dicts=item_dicts)","","        response = self.form_presenter.get_user_ordered_details_response(","            order_detail_dtos)","","        return response","","    def _convert_brand_to_dicts(self, brand_dtos):","        dicts = {}","","        for brand in brand_dtos:","            single_dict = {","                brand.brand_id: brand","            }","            dicts.update(single_dict)","        return dicts","","    def _convert_item_to_dicts(self, item_dtos):","        dicts = {}","","        for item in item_dtos:","            single_dict = {","                item.item_id: item","            }","            dicts.update(single_dict)","        return dicts","","    def _get_user_order_detail_dtos(self, orders, brand_dicts, item_dicts):","        order_dtos_list = []","","        for order in orders:","            cost_incurred, recieved_count = \\","                self._get_incurred_cost_and_recieved_count(","                    order=order,","                    brand_dicts=brand_dicts)","            print(item_dicts[order.item_id])","            dto = GetUserOrderDto(item_id=order.item_id,","                                  item_name=item_dicts[order.item_id].name,","                                  items_added=order.count,","                                  items_recived=recieved_count,","                                  cost_incurred=cost_incurred,","                                  out_of_stock=order.out_of_stock)","            order_dtos_list.append(dto)","        return order_dtos_list","","    def _get_incurred_cost_and_recieved_count(self,","                                              order,","                                              brand_dicts):","        price_per_item = brand_dicts[order.brand_id].price_per_item","        recieved_count = order.count - order.pending_count","        cost_incurred = recieved_count * price_per_item # have dout","        # i have to start from here","","        return cost_incurred, recieved_count",""],"id":12},{"start":{"row":0,"column":0},"end":{"row":97,"column":0},"action":"insert","lines":["from essentials_kit_management.interactors.storages import \\","    FormStorageInterface","from essentials_kit_management.interactors.presenters import \\","    FormPresenterInterface","","from essentials_kit_management.interactors.storages.dtos import (","    GetUserOrderDto",")","","from essentials_kit_management.constants.enums import FormStatusEnum","","","class GetUserOrderedDetailsInteractor:","","    def __init__(self,","                 form_storage: FormStorageInterface,","                 form_presenter: FormPresenterInterface):","","        self.form_storage = form_storage","        self.form_presenter = form_presenter","","    def get_user_ordered_details(self, user_id: int, form_id: int):","","        is_valid_form_id = self.form_storage.is_valid_form_id(form_id=form_id)","        invalid_form_id_given = not is_valid_form_id","","        if invalid_form_id_given:","            self.form_presenter.raise_invalid_form_id_exception()","            return","","        user_order_dtos = self.form_storage.get_order_dtos(user_id=user_id,","                                                           form_id=form_id)","        user_brand_dtos = self.form_storage.get_user_brand_dtos(","            user_order_dtos","        )","        user_item_dtos = self.form_storage.get_user_item_dtos(user_order_dtos)","","        brand_dicts = self._convert_brand_to_dicts(brand_dtos=user_brand_dtos)","        item_dicts = self._convert_item_to_dicts(item_dtos=user_item_dtos)","","        order_detail_dtos = self._get_user_order_detail_dtos(","            orders=user_order_dtos,","            brand_dicts=brand_dicts,","            item_dicts=item_dicts)","","        response = self.form_presenter.get_user_ordered_details_response(","            order_detail_dtos)","","        return response","","    def _convert_brand_to_dicts(self, brand_dtos):","        dicts = {}","","        for brand in brand_dtos:","            single_dict = {","                brand.brand_id: brand","            }","            dicts.update(single_dict)","        return dicts","","    def _convert_item_to_dicts(self, item_dtos):","        dicts = {}","","        for item in item_dtos:","            single_dict = {","                item.item_id: item","            }","            dicts.update(single_dict)","        return dicts","","    def _get_user_order_detail_dtos(self, orders, brand_dicts, item_dicts):","        order_dtos_list = []","","        for order in orders:","            cost_incurred, recieved_count = \\","                self._get_incurred_cost_and_recieved_count(","                    order=order,","                    brand_dicts=brand_dicts)","            print(item_dicts[order.item_id])","            dto = GetUserOrderDto(item_id=order.item_id,","                                  item_name=item_dicts[order.item_id].name,","                                  items_added=order.count,","                                  items_recived=recieved_count,","                                  cost_incurred=cost_incurred,","                                  out_of_stock=order.out_of_stock)","            order_dtos_list.append(dto)","        return order_dtos_list","","    def _get_incurred_cost_and_recieved_count(self,","                                              order,","                                              brand_dicts):","        price_per_item = brand_dicts[order.brand_id].price_per_item","        recieved_count = order.count - order.pending_count","        cost_incurred = recieved_count * price_per_item  # have dout","        # i have to start from here","","        return cost_incurred, recieved_count",""]}]]},"ace":{"folds":[],"scrolltop":1020,"scrollleft":0,"selection":{"start":{"row":97,"column":0},"end":{"row":97,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":62,"state":"start","mode":"ace/mode/python"}},"timestamp":1591391746513,"hash":"2d9a5c37d03f13a7582b98a54bffcb58b5c8c230"}