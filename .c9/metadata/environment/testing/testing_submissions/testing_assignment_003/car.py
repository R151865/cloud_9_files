{"filter":false,"title":"car.py","tooltip":"/testing/testing_submissions/testing_assignment_003/car.py","undoManager":{"mark":6,"position":6,"stack":[[{"start":{"row":0,"column":0},"end":{"row":135,"column":0},"action":"insert","lines":["import math","class Car:","    def __init__(self,max_speed,acceleration,tyre_friction,color='Red'):","        ","        if max_speed<=0:","            raise ValueError('Invalid value for max_speed')","        if acceleration<=0:","            raise ValueError('Invalid value for acceleration')","           ","        if tyre_friction<=0:","            raise ValueError('Invalid value for tyre_friction')","        ","        self._max_speed=max_speed","        self._tyre_friction=tyre_friction","        self._acceleration=acceleration","        self._color=color","        self._horn=\"Beep Beep\"","        self._is_engine_started=False","        self._current_speed=0","     ","    @property","    def max_speed(self):","        return self._max_speed","    @property","    def tyre_friction(self):","        return self._tyre_friction","    @property","    def acceleration(self):","        return self._acceleration","    @property","    def color(self):","        return self._color","    @property","    def is_engine_started(self):","        return self._is_engine_started","    @property","    def current_speed(self):","        return self._current_speed","   ","    def start_engine(self):","        self._is_engine_started=True","        ","    def stop_engine(self):","        self._is_engine_started=False","        ","    def accelerate(self):","        if self._is_engine_started:","            self._current_speed+=self._acceleration","            if(self._current_speed>self._max_speed):","                self._current_speed=self._max_speed","        else:","            print('Start the engine to accelerate')","            ","    def apply_brakes(self):","        if self._is_engine_started:","            self._current_speed-=self._tyre_friction","            if(self._current_speed<0):","                self._current_speed=0","                ","    def sound_horn(self):","        if self._is_engine_started:","            print(self._horn)","        else:","            print('Start the engine to sound_horn')","            ","            ","class Truck(Car):","    def __init__(self,max_speed,acceleration,tyre_friction,max_cargo_weight,color='Red'):","        if max_cargo_weight<=0:","            raise ValueError('Invalid value for max_cargo_weight')","            ","        super().__init__(max_speed,acceleration,tyre_friction,color)","        self._max_cargo_weight=max_cargo_weight","        self._horn='Honk Honk'","        self._load_weight=0","        ","    @property","    def max_cargo_weight(self):","        return self._max_cargo_weight","        ","    def load(self,cargo_weight):","        if cargo_weight<0:","            raise ValueError('Invalid value for cargo_weight')","        ","        if self._current_speed==0:","            self._load_weight+=cargo_weight","            if self._load_weight>self._max_cargo_weight:","                self._load_weight-=cargo_weight","                print('Cannot load cargo more than max limit: {}'.format(self.max_cargo_weight))","        else:","            print('Cannot load cargo during motion')","            ","    def unload(self,cargo_weight):","        if cargo_weight<=0:","            raise ValueError('Invalid value for cargo_weight')","        if self._current_speed==0:","            self._load_weight-=cargo_weight","            if self._load_weight<0:","                self._load_weight=0","        else:","            print('Cannot unload cargo during motion')","        ","    ","class RaceCar(Car):","    def __init__(self,max_speed,acceleration,tyre_friction,color='Red'):","        super().__init__(max_speed,acceleration,tyre_friction,color)","        self._nitro=0","        self._horn='Peep Peep\\nBeep Beep'","        ","    @property","    def nitro(self):","        return self._nitro","    ","    def accelerate(self):","        if self._is_engine_started:","            self._current_speed+=self._acceleration","             #super().accelerate()","            if (self._nitro>0):","                self._current_speed+=math.ceil(self._acceleration*0.3)","                self._nitro-=10","                if(self._nitro<0):","                    self._nitro=0","            if(self._current_speed>self._max_speed):","                self._current_speed=self._max_speed","        else:","            print('Start the engine to accelerate')","        ","            ","    def apply_brakes(self):","        if (self._current_speed>(self._max_speed)/2) and self.is_engine_started:","            self._nitro+=10","        super().apply_brakes()","        ","        ","",""],"id":1}],[{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"remove","lines":["h"],"id":2},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"remove","lines":["t"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"remove","lines":["a"]},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"remove","lines":["m"]},{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"remove","lines":[" "]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"remove","lines":["t"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"remove","lines":["r"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"remove","lines":["o"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":["p"]},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["m"]}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["i"],"id":3}],[{"start":{"row":66,"column":0},"end":{"row":101,"column":8},"action":"remove","lines":["class Truck(Car):","    def __init__(self,max_speed,acceleration,tyre_friction,max_cargo_weight,color='Red'):","        if max_cargo_weight<=0:","            raise ValueError('Invalid value for max_cargo_weight')","            ","        super().__init__(max_speed,acceleration,tyre_friction,color)","        self._max_cargo_weight=max_cargo_weight","        self._horn='Honk Honk'","        self._load_weight=0","        ","    @property","    def max_cargo_weight(self):","        return self._max_cargo_weight","        ","    def load(self,cargo_weight):","        if cargo_weight<0:","            raise ValueError('Invalid value for cargo_weight')","        ","        if self._current_speed==0:","            self._load_weight+=cargo_weight","            if self._load_weight>self._max_cargo_weight:","                self._load_weight-=cargo_weight","                print('Cannot load cargo more than max limit: {}'.format(self.max_cargo_weight))","        else:","            print('Cannot load cargo during motion')","            ","    def unload(self,cargo_weight):","        if cargo_weight<=0:","            raise ValueError('Invalid value for cargo_weight')","        if self._current_speed==0:","            self._load_weight-=cargo_weight","            if self._load_weight<0:","                self._load_weight=0","        else:","            print('Cannot unload cargo during motion')","        "],"id":4}],[{"start":{"row":66,"column":0},"end":{"row":99,"column":0},"action":"remove","lines":["","    ","class RaceCar(Car):","    def __init__(self,max_speed,acceleration,tyre_friction,color='Red'):","        super().__init__(max_speed,acceleration,tyre_friction,color)","        self._nitro=0","        self._horn='Peep Peep\\nBeep Beep'","        ","    @property","    def nitro(self):","        return self._nitro","    ","    def accelerate(self):","        if self._is_engine_started:","            self._current_speed+=self._acceleration","             #super().accelerate()","            if (self._nitro>0):","                self._current_speed+=math.ceil(self._acceleration*0.3)","                self._nitro-=10","                if(self._nitro<0):","                    self._nitro=0","            if(self._current_speed>self._max_speed):","                self._current_speed=self._max_speed","        else:","            print('Start the engine to accelerate')","        ","            ","    def apply_brakes(self):","        if (self._current_speed>(self._max_speed)/2) and self.is_engine_started:","            self._nitro+=10","        super().apply_brakes()","        ","        ",""],"id":5}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["i"],"id":6},{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["m"]},{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":["p"]},{"start":{"row":0,"column":3},"end":{"row":0,"column":4},"action":"insert","lines":["o"]},{"start":{"row":0,"column":4},"end":{"row":0,"column":5},"action":"insert","lines":["r"]},{"start":{"row":0,"column":5},"end":{"row":0,"column":6},"action":"insert","lines":["t"]}],[{"start":{"row":0,"column":6},"end":{"row":0,"column":7},"action":"insert","lines":[" "],"id":7},{"start":{"row":0,"column":7},"end":{"row":0,"column":8},"action":"insert","lines":["m"]},{"start":{"row":0,"column":8},"end":{"row":0,"column":9},"action":"insert","lines":["a"]},{"start":{"row":0,"column":9},"end":{"row":0,"column":10},"action":"insert","lines":["t"]},{"start":{"row":0,"column":10},"end":{"row":0,"column":11},"action":"insert","lines":["h"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":15,"column":25},"end":{"row":15,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1587012369264,"hash":"3368f9b0c8d76cb645453f939947306fe154017d"}